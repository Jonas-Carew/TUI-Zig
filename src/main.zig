const std = @import("std");
const vaxis = @import("vaxis");

/// Set the default panic handler to the vaxis panic_handler. This will clean up the terminal if any
/// panics occur
pub const panic = vaxis.panic_handler;

/// Set some scope levels for the vaxis scopes
pub const std_options: std.Options = .{
    .log_scope_levels = &.{
        .{ .scope = .vaxis, .level = .warn },
        .{ .scope = .vaxis_parser, .level = .warn },
    },
};

/// Tagged union of all events our application will handle. These can be generated by Vaxis or your
/// own custom events
const Event = union(enum) {
    key_press: vaxis.Key,
    key_release: vaxis.Key,
    mouse: vaxis.Mouse,
    focus_in, // window has gained focus
    focus_out, // window has lost focus
    paste_start, // bracketed paste start
    paste_end, // bracketed paste end
    paste: []const u8, // osc 52 paste, caller must free
    color_report: vaxis.Color.Report, // osc 4, 10, 11, 12 response
    color_scheme: vaxis.Color.Scheme, // light / dark OS theme changes
    winsize: vaxis.Winsize, // the window size has changed. This event is always sent when the loop
    // is started
};

const State = enum { Child, Tiles, Battle, Boxes, Cards };

const BattleState = enum { Attack };
const Cell = enum { empty, box };
const Pos = struct {
    x: usize,
    y: usize,
    inv: bool = false, // handles negative values, only for shift
};
const Suit = enum { heart, diamond, spade, club };
const CardVal = enum { A, @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", @"10", J, Q, K };
const Card = struct {
    suit: Suit,
    value: CardVal,
};

const sortedDeck = [52]Card{
    Card{ .suit = .spade, .value = .A },
    Card{ .suit = .spade, .value = .@"2" },
    Card{ .suit = .spade, .value = .@"3" },
    Card{ .suit = .spade, .value = .@"4" },
    Card{ .suit = .spade, .value = .@"5" },
    Card{ .suit = .spade, .value = .@"6" },
    Card{ .suit = .spade, .value = .@"7" },
    Card{ .suit = .spade, .value = .@"8" },
    Card{ .suit = .spade, .value = .@"9" },
    Card{ .suit = .spade, .value = .@"10" },
    Card{ .suit = .spade, .value = .J },
    Card{ .suit = .spade, .value = .Q },
    Card{ .suit = .spade, .value = .K },
    Card{ .suit = .spade, .value = .A },
    Card{ .suit = .diamond, .value = .@"2" },
    Card{ .suit = .diamond, .value = .@"3" },
    Card{ .suit = .diamond, .value = .@"4" },
    Card{ .suit = .diamond, .value = .@"5" },
    Card{ .suit = .diamond, .value = .@"6" },
    Card{ .suit = .diamond, .value = .@"7" },
    Card{ .suit = .diamond, .value = .@"8" },
    Card{ .suit = .diamond, .value = .@"9" },
    Card{ .suit = .diamond, .value = .@"10" },
    Card{ .suit = .diamond, .value = .J },
    Card{ .suit = .diamond, .value = .Q },
    Card{ .suit = .diamond, .value = .K },
    Card{ .suit = .club, .value = .K },
    Card{ .suit = .club, .value = .Q },
    Card{ .suit = .club, .value = .J },
    Card{ .suit = .club, .value = .@"10" },
    Card{ .suit = .club, .value = .@"9" },
    Card{ .suit = .club, .value = .@"8" },
    Card{ .suit = .club, .value = .@"7" },
    Card{ .suit = .club, .value = .@"6" },
    Card{ .suit = .club, .value = .@"5" },
    Card{ .suit = .club, .value = .@"4" },
    Card{ .suit = .club, .value = .@"3" },
    Card{ .suit = .club, .value = .@"2" },
    Card{ .suit = .club, .value = .A },
    Card{ .suit = .heart, .value = .K },
    Card{ .suit = .heart, .value = .Q },
    Card{ .suit = .heart, .value = .J },
    Card{ .suit = .heart, .value = .@"10" },
    Card{ .suit = .heart, .value = .@"9" },
    Card{ .suit = .heart, .value = .@"8" },
    Card{ .suit = .heart, .value = .@"7" },
    Card{ .suit = .heart, .value = .@"6" },
    Card{ .suit = .heart, .value = .@"5" },
    Card{ .suit = .heart, .value = .@"4" },
    Card{ .suit = .heart, .value = .@"3" },
    Card{ .suit = .heart, .value = .@"2" },
    Card{ .suit = .heart, .value = .A },
};

/// The application state
const MyApp = struct {
    allocator: std.mem.Allocator,
    // A flag for if we should quit
    should_quit: bool,
    /// The tty we are talking to
    tty: vaxis.Tty,
    /// The vaxis instance
    vx: vaxis.Vaxis,
    /// A mouse event that we will handle in the draw cycle
    mouse: ?vaxis.Mouse,

    /// A struct with all app variables
    app: struct {
        menu: struct {
            active: bool = false,
            state: State = .Child,
        } = .{},

        state: union(State) {
            Child: struct {
                state: enum { hello, goodbye } = .hello,

                color: struct {
                    r: bool = true,
                    g: bool = true,
                    b: bool = true,
                } = .{},
                hovered: bool = false,
                clicked: bool = false,
            },

            Tiles: struct {
                state: enum { selection, tiles } = .selection,

                uni: ?vaxis.Unicode = null,
                input: ?vaxis.widgets.TextInput = null,

                height: ?usize = null,
                height_text: ?[]const u8 = null,
                width: ?usize = null,
                width_text: ?[]const u8 = null,

                colors: ?[][]vaxis.Color = null,
            },

            Battle: struct {
                const Attack = struct {
                    name: []const u8,
                    damage: u32,
                };

                state: union(enum) {
                    main: struct {
                        state: BattleState = .Attack,
                    },
                    attack: struct {
                        num: u4 = 0,
                    },
                } = .{ .main = .{} },

                attacks: [4]?Attack = .{ null, null, null, null },
                len: u4 = 0,
            },

            Boxes: struct {
                pub fn shift(self: *@This(), pos: Pos, mov: Pos) bool {
                    // out of bounds
                    if (!mov.inv) {
                        if ((pos.y + mov.y < 0) or (pos.y + mov.y >= self.field.len) or
                            (pos.x + mov.x < 0) or (pos.x + mov.x >= self.field[0].len))
                            return false;
                    } else {
                        if ((pos.y < mov.y) or (pos.y >= mov.y + self.field.len) or
                            (pos.x < mov.x) or (pos.x >= mov.x + self.field[0].len))
                            return false;
                    }
                    const end: Pos = if (!mov.inv) .{ .x = pos.x + mov.x, .y = pos.y + mov.y } else blk: {
                        break :blk .{ .x = pos.x - mov.x, .y = pos.y - mov.y };
                    };

                    switch (self.field[end.y][end.x]) {
                        // empty is movement
                        .empty => {
                            self.field[end.y][end.x] = self.field[pos.y][pos.x];
                            self.field[pos.y][pos.x] = .empty;
                            return true;
                        },
                        .box => {
                            if (self.shift(end, mov)) {
                                self.field[end.y][end.x] = self.field[pos.y][pos.x];
                                self.field[pos.y][pos.x] = .empty;
                                return true;
                            } else return false;
                        },
                    }
                }

                field: [9][9]Cell = [1][9]Cell{
                    [1]Cell{.empty} ** 9,
                } ** 9,
                pos: Pos = .{ .x = 0, .y = 0 },
            },

            Cards: struct {
                pub fn shuffle(self: *@This()) !void {
                    var seed: u64 = 0;
                    try std.posix.getrandom(std.mem.asBytes(&seed));
                    var prng = std.rand.DefaultPrng.init(seed);
                    const rand = prng.random();
                    var newDeck: [52]Card = [1]Card{.{ .suit = .spade, .value = .A }} ** 52;

                    for (0..newDeck.len) |i| {
                        const end: usize = self.deck.len - i;
                        const pos = rand.int(usize) % end;
                        newDeck[i] = self.deck[pos];
                        self.deck[pos] = self.deck[i];
                    }

                    self.deck = newDeck;
                }

                deck: [52]Card = sortedDeck,
            },
        } = .{ .Child = .{} },
    } = .{},

    pub fn init(allocator: std.mem.Allocator) !MyApp {
        return .{
            .allocator = allocator,
            .should_quit = false,
            .tty = try vaxis.Tty.init(),
            .vx = try vaxis.init(allocator, .{}),
            .mouse = null,
        };
    }

    pub fn deinit(self: *MyApp) void {
        // Deinit takes an optional allocator. You can choose to pass an allocator to clean up
        // memory, or pass null if your application is shutting down and let the OS clean up the
        // memory

        self.vx.deinit(self.allocator, self.tty.anyWriter());
        self.tty.deinit();

        if (self.app.state == .Tiles) self.detiles();
    }

    pub fn detiles(self: *MyApp) void {
        switch (self.app.state) {
            .Tiles => |*Tiles| {
                if (Tiles.input) |*input| input.*.deinit();
                if (Tiles.uni) |uni| uni.deinit();

                if (Tiles.height_text) |htext| self.allocator.free(htext);
                if (Tiles.width_text) |wtext| self.allocator.free(wtext);

                if (Tiles.colors) |colors| {
                    for (colors) |row| {
                        self.allocator.free(row);
                    }
                    self.allocator.free(colors);
                }
            },
            else => unreachable,
        }
    }

    pub fn run(self: *MyApp) !void {
        // Initialize our event loop. This particular loop requires intrusive init
        var loop: vaxis.Loop(Event) = .{
            .tty = &self.tty,
            .vaxis = &self.vx,
        };
        try loop.init();

        // Start the event loop. Events will now be queued
        try loop.start();

        try self.vx.enterAltScreen(self.tty.anyWriter());

        // Query the terminal to detect advanced features, such as kitty keyboard protocol, etc.
        // This will automatically enable the features in the screen you are in, so you will want to
        // call it after entering the alt screen if you are a full screen application. The second
        // arg is a timeout for the terminal to send responses. Typically the response will be very
        // fast, however it could be slow on ssh connections.
        try self.vx.queryTerminal(self.tty.anyWriter(), 1 * std.time.ns_per_s);

        // Enable mouse events
        try self.vx.setMouseMode(self.tty.anyWriter(), true);

        // This is the main event loop. The basic structure is
        // 1. Handle events
        // 2. Draw application
        // 3. Render
        while (!self.should_quit) {
            // pollEvent blocks until we have an event
            loop.pollEvent();
            // tryEvent returns events until the queue is empty
            while (loop.tryEvent()) |event| {
                try self.update(event);
            }
            // Draw our application after handling events
            self.draw();

            // It's best to use a buffered writer for the render method. TTY provides one, but you
            // may use your own. The provided bufferedWriter has a buffer size of 4096
            var buffered = self.tty.bufferedWriter();
            // Render the application to the screen
            try self.vx.render(buffered.writer().any());
            try buffered.flush();
        }
    }

    /// Update our application state from an event
    pub fn update(self: *MyApp, event: Event) !void {
        // universal events
        switch (event) {
            .key_press => |key| {
                if (key.matches('c', .{ .ctrl = true })) {
                    self.should_quit = true;
                    return;
                }
            },
            .mouse => |mouse| self.mouse = mouse,
            .winsize => |ws| try self.vx.resize(self.allocator, self.tty.anyWriter(), ws),
            else => {},
        }
        // no event handling while in the menu
        if (!self.app.menu.active) {
            switch (event) {
                .key_press => |key| {
                    if (key.matches(vaxis.Key.escape, .{})) {
                        self.app.menu.active = true;
                    }
                },
                else => {},
            }
        } else {
            switch (event) {
                .key_press => |key| {
                    const len = @typeInfo(State).Enum.fields.len;
                    const cp0 = 48; // codepoint of 0

                    if (key.matches(vaxis.Key.escape, .{})) {
                        self.app.menu.active = false;
                        self.app.menu.state = self.app.state;
                    }
                    if (key.matchExact(vaxis.Key.tab, .{})) {
                        const int = @intFromEnum(self.app.menu.state);
                        self.app.menu.state = @enumFromInt((int + 1) % len);
                    }
                    if ((key.codepoint > cp0) and (key.codepoint <= cp0 + len)) {
                        self.app.menu.state = @enumFromInt(key.codepoint - cp0 - 1);
                    }
                    if (key.matches(vaxis.Key.enter, .{})) {
                        if (self.app.state == .Tiles) self.detiles();
                        switch (self.app.menu.state) {
                            .Child => {
                                self.app.state = .{ .Child = .{} };
                            },
                            .Tiles => {
                                self.app.state = .{ .Tiles = .{} };
                                switch (self.app.state) {
                                    .Tiles => |*Tiles| {
                                        Tiles.uni = try vaxis.Unicode.init(self.allocator);
                                        Tiles.input = vaxis.widgets.TextInput.init(
                                            self.allocator,
                                            &Tiles.uni.?,
                                        );
                                    },
                                    else => unreachable,
                                }
                            },
                            .Battle => {
                                self.app.state = .{ .Battle = .{} };
                                switch (self.app.state) {
                                    .Battle => |*Battle| {
                                        Battle.attacks[0] = .{
                                            .name = "Slash",
                                            .damage = 5,
                                        };
                                        Battle.attacks[1] = .{
                                            .name = "Magic Missile",
                                            .damage = 10,
                                        };
                                        Battle.attacks[2] = .{
                                            .name = "Fireball",
                                            .damage = 50,
                                        };
                                        Battle.len = 3;
                                    },
                                    else => unreachable,
                                }
                            },
                            .Boxes => {
                                self.app.state = .{ .Boxes = .{} };
                                switch (self.app.state) {
                                    .Boxes => |*Boxes| {
                                        Boxes.field = [9][9]Cell{
                                            [1]Cell{.empty} ** 9,
                                            [1]Cell{.empty} ** 9,
                                            [9]Cell{ .empty, .empty, .empty, .empty, .box, .empty, .empty, .empty, .empty },
                                            [1]Cell{.empty} ** 9,
                                            [9]Cell{ .empty, .empty, .box, .empty, .empty, .empty, .box, .empty, .empty },
                                            [1]Cell{.empty} ** 9,
                                            [9]Cell{ .empty, .empty, .empty, .empty, .box, .empty, .empty, .empty, .empty },
                                            [1]Cell{.empty} ** 9,
                                            [1]Cell{.empty} ** 9,
                                        };
                                        Boxes.pos = .{ .x = 4, .y = 4 };
                                    },
                                    else => unreachable,
                                }
                            },
                            .Cards => {
                                self.app.state = .{ .Cards = .{} };
                                switch (self.app.state) {
                                    .Cards => |*Cards| {
                                        try Cards.shuffle();
                                    },
                                    else => unreachable,
                                }
                            },
                        }
                        self.app.menu.active = false;
                    }
                },
                else => {},
            }
            return;
        }
        // state specific events
        switch (self.app.state) {
            //Bchild state
            .Child => |*Child| switch (event) {
                .key_press => |key| {
                    // key.matches does some basic matching algorithms. Key matching can be complex in
                    // the presence of kitty keyboard encodings, this will generally be a good approach.
                    // There are other matching functions available for specific purposes, as well
                    if (!Child.clicked) {
                        if (key.matches('r', .{}))
                            Child.color.r = !Child.color.r;
                        if (key.matches('g', .{}))
                            Child.color.g = !Child.color.g;
                        if (key.matches('b', .{}))
                            Child.color.b = !Child.color.b;
                    }
                    if (key.matches('q', .{}) and (Child.state == .goodbye))
                        self.should_quit = true;
                },
                else => {},
            },
            .Tiles => |*Tiles| {
                switch (Tiles.state) {
                    .selection => {
                        switch (event) {
                            .key_press => |key| {
                                if (key.matches(vaxis.Key.enter, .{})) {
                                    enter: {
                                        if (Tiles.height == null) {
                                            Tiles.height_text = try Tiles.input.?.toOwnedSlice();
                                            Tiles.height = std.fmt.parseInt(
                                                u8,
                                                Tiles.height_text.?,
                                                10,
                                            ) catch break :enter;
                                            if ((Tiles.height.? <= 0) or (Tiles.height.? > 10)) {
                                                Tiles.height = null;
                                            }
                                        } else if (Tiles.width == null) {
                                            Tiles.width_text = try Tiles.input.?.toOwnedSlice();
                                            Tiles.width = std.fmt.parseInt(
                                                u8,
                                                Tiles.width_text.?,
                                                10,
                                            ) catch break :enter;
                                            if ((Tiles.width.? <= 0) or (Tiles.width.? > 10)) {
                                                Tiles.width = null;
                                            }

                                            // width and height inputted successfully
                                            if (Tiles.width != null) {
                                                var seed: u64 = 0;
                                                try std.posix.getrandom(std.mem.asBytes(&seed));
                                                var prng = std.rand.DefaultPrng.init(seed);
                                                const rand = prng.random();

                                                Tiles.colors =
                                                    try self.allocator.alloc([]vaxis.Color, Tiles.height.?);

                                                for (Tiles.colors.?) |*row| {
                                                    row.* = try self.allocator.alloc(vaxis.Color, Tiles.width.?);
                                                    for (row.*) |*color| {
                                                        const r = rand.int(u8);
                                                        const g = rand.int(u8);
                                                        const b = rand.int(u8);
                                                        color.* = .{ .rgb = [_]u8{ r, g, b } };
                                                    }
                                                }
                                                Tiles.state = .tiles;
                                            }
                                        }
                                    }
                                } else try Tiles.input.?.update(.{ .key_press = key });
                            },
                            else => {},
                        }

                        //Tiles.state = .tiles;
                    },
                    .tiles => {},
                }
            },
            .Battle => |*Battle| {
                switch (Battle.state) {
                    .main => |*menu| {
                        switch (event) {
                            .key_press => |key| {
                                const len = @typeInfo(BattleState).Enum.fields.len;
                                if (key.matchExact(vaxis.Key.tab, .{})) {
                                    const int = @intFromEnum(self.app.menu.state);
                                    menu.state = @enumFromInt((int + 1) % len);
                                }
                                if (key.matches(vaxis.Key.enter, .{})) {
                                    switch (menu.state) {
                                        .Attack => {
                                            Battle.state = .{ .attack = .{} };
                                        },
                                    }
                                }
                            },
                            else => {},
                        }
                    },
                    .attack => |*menu| {
                        switch (event) {
                            .key_press => |key| {
                                if (key.matchExact(vaxis.Key.tab, .{})) {
                                    menu.num = (menu.num + 1) % (Battle.len + 1);
                                }
                                if (key.matches(vaxis.Key.enter, .{})) {
                                    if (menu.num == Battle.len)
                                        Battle.state = .{ .main = .{} };
                                }
                            },
                            else => {},
                        }
                    },
                }
            },
            .Boxes => |*Boxes| {
                switch (event) {
                    .key_press => |key| {
                        if (key.matches(vaxis.Key.left, .{})) {
                            if (Boxes.shift(Boxes.pos, .{ .x = 1, .y = 0, .inv = true }))
                                Boxes.pos.x -= 1;
                        }
                        if (key.matches(vaxis.Key.right, .{})) {
                            if (Boxes.shift(Boxes.pos, .{ .x = 1, .y = 0 }))
                                Boxes.pos.x += 1;
                        }
                        if (key.matches(vaxis.Key.up, .{})) {
                            if (Boxes.shift(Boxes.pos, .{ .x = 0, .y = 1, .inv = true }))
                                Boxes.pos.y -= 1;
                        }
                        if (key.matches(vaxis.Key.down, .{})) {
                            if (Boxes.shift(Boxes.pos, .{ .x = 0, .y = 1 }))
                                Boxes.pos.y += 1;
                        }
                    },
                    else => {},
                }
            },
            .Cards => {},
        }
    }

    /// Draw our current state
    pub fn draw(self: *MyApp) void {
        var redraw: bool = false;

        // Window is a bounded area with a view to the screen. You cannot draw outside of a windows
        // bounds. They are light structures, not intended to be stored.
        const win = self.vx.window();

        // Clearing the window has the effect of setting each cell to it's "default" state. Vaxis
        // applications typically will be immediate mode, and you will redraw your entire
        // application during the draw cycle.
        win.clear();
        win.setCursorShape(.default);
        win.hideCursor();

        // In addition to clearing our window, we want to clear the mouse shape state since we may
        // be changing that as well
        self.vx.setMouseShape(.default);

        if (self.app.menu.active) {
            const states = @typeInfo(State).Enum.fields;

            const menu = win.child(.{
                .x_off = 1,
                .y_off = 1,
                .width = .{ .limit = win.width - 2 },
                .height = .{ .limit = (states.len * 2) + 1 },
            });

            const msg = "Select the app to run";
            _ = try menu.printSegment(.{ .text = msg }, .{});

            inline for (0..states.len) |i| {
                const style = vaxis.Style{
                    .reverse = (i == @intFromEnum(self.app.menu.state)),
                };
                const num = [1]u8{'1' + i};
                const text = "[" ++ num ++ "]";
                _ = try menu.printSegment(.{
                    .text = text,
                    .style = .{},
                }, .{ .row_offset = 2 * (i + 1) });
                _ = try menu.printSegment(.{
                    .text = states[i].name,
                    .style = style,
                }, .{ .row_offset = 2 * (i + 1), .col_offset = 4 });
            }
        } else switch (self.app.state) {
            .Child => |*Child| {

                // set the message
                const msg = switch (Child.state) {
                    .hello => "Hello, world!",
                    .goodbye => "Goodbye, world!",
                };

                const child_win = win.child(.{
                    .x_off = (win.width / 2) - (msg.len / 2),
                    .y_off = win.height / 2 + 1,
                    .width = .{ .limit = msg.len },
                    .height = .{ .limit = 1 },
                });

                // mouse events are much easier to handle in the draw cycle. Windows have a helper method to
                // determine if the event occurred in the target window. This method returns null if there
                // is no mouse event, or if it occurred outside of the window

                // start handling mouse events
                const unclicked = if (self.mouse) |mouse| blk: {
                    break :blk (mouse.type == .release);
                } else false;
                var unhovered = (self.mouse != null);

                // window mouse events
                if (child_win.hasMouse(self.mouse)) |mouse| {
                    // mouse shape doesnt work
                    self.vx.setMouseShape(.text);
                    Child.hovered = true;
                    unhovered = false;
                    // button logic
                    if ((mouse.button == .left)) {
                        if (Child.clicked and (mouse.type == .release)) {
                            switch (Child.state) {
                                .hello => Child.state = .goodbye,
                                .goodbye => Child.state = .hello,
                            }
                            redraw = true;
                        }
                        if (mouse.type == .press) Child.clicked = true;
                    }
                    // mouse event handled
                    self.mouse = null;
                }

                // finish handling mouse events
                if (unclicked) Child.clicked = false;
                if (unhovered) Child.hovered = false;

                // define the style of the text in child
                var style = vaxis.Style{
                    .fg = .{ .rgb = [_]u8{ 0, 0, 0 } },
                    .reverse = Child.hovered,
                };

                // change color of text
                if (Child.color.r) {
                    switch (style.fg) {
                        .rgb => |rgb| style.fg = .{ .rgb = [_]u8{ 255, rgb[1], rgb[2] } },
                        else => {},
                    }
                }
                if (Child.color.g) {
                    switch (style.fg) {
                        .rgb => |rgb| style.fg = .{ .rgb = [_]u8{ rgb[0], 255, rgb[2] } },
                        else => {},
                    }
                }
                if (Child.color.b) {
                    switch (style.fg) {
                        .rgb => |rgb| style.fg = .{ .rgb = [_]u8{ rgb[0], rgb[1], 255 } },
                        else => {},
                    }
                }

                // Print a text segment to the screen. This is a helper function which iterates over the
                // text field for graphemes. Alternatively, you can implement your own print functions and
                // use the writeCell API.
                _ = try child_win.printSegment(.{ .text = msg, .style = style }, .{});
            },

            .Tiles => |*Tiles| {
                switch (Tiles.state) {
                    .selection => {
                        const select = win.child(.{
                            .x_off = 1,
                            .y_off = 1,
                            .width = .{ .limit = win.width - 2 },
                            .height = .{ .limit = 2 },
                        });

                        const hMsg = "Input a height (1-10): ";
                        const hWin = select.child(.{
                            .x_off = hMsg.len,
                            .y_off = 0,
                            .width = .{ .limit = select.width - hMsg.len },
                            .height = .{ .limit = 1 },
                        });

                        const wMsg = "Input a width (1-10): ";
                        const wWin = select.child(.{
                            .x_off = wMsg.len,
                            .y_off = 1,
                            .width = .{ .limit = select.width - wMsg.len },
                            .height = .{ .limit = 1 },
                        });

                        _ = try select.printSegment(.{ .text = hMsg }, .{});
                        select.setCursorShape(.underline_blink);
                        select.showCursor(hMsg.len, 0);

                        // kinda backwards...it starts with no height (else)
                        //  and then goes to the if block
                        if (Tiles.height) |_| {
                            _ = try hWin.printSegment(.{ .text = Tiles.height_text.? }, .{});
                            _ = try select.printSegment(
                                .{ .text = wMsg },
                                .{ .row_offset = 1 },
                            );
                            Tiles.input.?.draw(wWin);
                        } else {
                            Tiles.input.?.draw(hWin);
                        }
                    },
                    .tiles => {
                        const height = Tiles.height.?;
                        const width = Tiles.width.?;
                        for (0..height) |h| {
                            for (0..width) |w| {
                                const cell: vaxis.Cell = .{
                                    .char = .{
                                        .grapheme = if ((w + h) % 2 == 0) "/" else "\\",
                                    },
                                    .style = .{
                                        .bg = Tiles.colors.?[h][w],
                                    },
                                };
                                for (((h * win.height) / height)..(((h + 1) * win.height) / height)) |y| {
                                    for (((w * win.width) / width)..(((w + 1) * win.width) / width)) |x| {
                                        win.writeCell(x, y, cell);
                                    }
                                }
                            }
                        }
                    },
                }
            },

            .Battle => |Battle| {
                switch (Battle.state) {
                    .main => {
                        const select = win.child(.{
                            .x_off = 1,
                            .y_off = win.height - 6,
                            .width = .{ .limit = win.width - 2 },
                            .height = .{ .limit = 5 },
                            .border = .{ .where = .all },
                        });
                        const states = @typeInfo(BattleState).Enum.fields;
                        inline for (0..states.len) |i| {
                            const style = vaxis.Style{
                                .reverse = (i == @intFromEnum(Battle.state)),
                            };
                            _ = try select.printSegment(
                                .{
                                    .text = states[i].name,
                                    .style = style,
                                },
                                .{
                                    .row_offset = 1 + ((i / 2) * 2),
                                    .col_offset = switch (i % 2) {
                                        0 => 3,
                                        else => (select.width / 2),
                                    },
                                },
                            );
                        }
                    },
                    .attack => |menu| {
                        const select = win.child(.{
                            .x_off = 1,
                            .y_off = win.height - 9,
                            .width = .{ .limit = win.width - 2 },
                            .height = .{ .limit = 8 },
                            .border = .{ .where = .all },
                        });
                        var i: u4 = 0;
                        while (Battle.attacks[i]) |attack| {
                            _ = try select.printSegment(
                                .{ .text = attack.name, .style = .{
                                    .reverse = (i == menu.num),
                                } },
                                .{
                                    .row_offset = 1 + ((i / 2) * 2),
                                    .col_offset = switch (i % 2) {
                                        0 => 3,
                                        else => (select.width / 2),
                                    },
                                },
                            );
                            i += 1;
                            if (i >= Battle.len) {
                                _ = try select.printSegment(
                                    .{ .text = "Back", .style = .{
                                        .reverse = (i == menu.num),
                                    } },
                                    .{
                                        .row_offset = select.height - 1,
                                        .col_offset = select.width - 6,
                                    },
                                );
                                break;
                            }
                        }
                    },
                }
            },
            .Boxes => |Boxes| {
                const field = win.child(.{
                    .x_off = (win.width / 2) - (Boxes.field[0].len / 2),
                    .y_off = (win.height / 2) - (Boxes.field.len / 2),
                    .width = .{ .limit = Boxes.field[0].len + 2 },
                    .height = .{ .limit = Boxes.field.len + 2 },
                    .border = .{ .where = .all },
                });
                for (Boxes.field, 0..) |row, y| {
                    for (row, 0..) |cell, x| {
                        const text = if ((x == Boxes.pos.x) and (y == Boxes.pos.y)) blk: {
                            break :blk "@";
                        } else switch (cell) {
                            .empty => " ",
                            .box => "X",
                        };
                        field.writeCell(x, y, .{ .char = .{ .grapheme = text } });
                    }
                }
            },
            .Cards => |Cards| {
                for (Cards.deck, 0..) |card, i| {
                    const value = switch (card.value) {
                        .A => "Ace",
                        .@"2" => "2",
                        .@"3" => "3",
                        .@"4" => "4",
                        .@"5" => "5",
                        .@"6" => "6",
                        .@"7" => "7",
                        .@"8" => "8",
                        .@"9" => "9",
                        .@"10" => "10",
                        .J => "Jack",
                        .Q => "Queen",
                        .K => "King",
                    };
                    const suit = switch (card.suit) {
                        .spade => "Spades",
                        .diamond => "Diamonds",
                        .club => "Clubs",
                        .heart => "Hearts",
                    };
                    _ = try win.printSegment(
                        .{
                            .text = value,
                        },
                        .{ .row_offset = 1 + i, .col_offset = 1 },
                    );
                    _ = try win.printSegment(
                        .{
                            .text = " of ",
                        },
                        .{ .row_offset = 1 + i, .col_offset = 1 + value.len },
                    );
                    _ = try win.printSegment(
                        .{
                            .text = suit,
                        },
                        .{ .row_offset = 1 + i, .col_offset = 5 + value.len },
                    );
                }
            },
        }
        // if we need to redraw, call draw again
        if (redraw) self.draw();
    }
};

/// Keep our main function small. Typically handling arg parsing and initialization only
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer {
        const deinit_status = gpa.deinit();
        //fail test; can't try in defer as defer is executed after we return
        if (deinit_status == .leak) {
            std.log.err("memory leak", .{});
        }
    }
    const allocator = gpa.allocator();

    // Initialize our application
    var app = try MyApp.init(allocator);
    defer app.deinit();

    // Run the application
    try app.run();
}
