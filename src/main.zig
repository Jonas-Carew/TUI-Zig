const std = @import("std");
const vaxis = @import("vaxis");

/// Set the default panic handler to the vaxis panic_handler. This will clean up the terminal if any
/// panics occur
pub const panic = vaxis.panic_handler;

/// Set some scope levels for the vaxis scopes
pub const std_options: std.Options = .{
    .log_scope_levels = &.{
        .{ .scope = .vaxis, .level = .warn },
        .{ .scope = .vaxis_parser, .level = .warn },
    },
};

/// Tagged union of all events our application will handle. These can be generated by Vaxis or your
/// own custom events
const Event = union(enum) {
    key_press: vaxis.Key,
    key_release: vaxis.Key,
    mouse: vaxis.Mouse,
    focus_in, // window has gained focus
    focus_out, // window has lost focus
    paste_start, // bracketed paste start
    paste_end, // bracketed paste end
    paste: []const u8, // osc 52 paste, caller must free
    color_report: vaxis.Color.Report, // osc 4, 10, 11, 12 response
    color_scheme: vaxis.Color.Scheme, // light / dark OS theme changes
    winsize: vaxis.Winsize, // the window size has changed. This event is always sent when the loop
    // is started
};

const Color = struct {
    r: u8,
    g: u8,
    b: u8,
};

/// The application state
const MyApp = struct {
    allocator: std.mem.Allocator,
    // A flag for if we should quit
    should_quit: bool,
    /// The tty we are talking to
    tty: vaxis.Tty,
    /// The vaxis instance
    vx: vaxis.Vaxis,
    /// A mouse event that we will handle in the draw cycle
    mouse: ?vaxis.Mouse,

    /// A struct with all app variables
    app: struct {
        state: enum { child, tiles } = .child,

        child: struct {
            state: enum { hello, goodbye } = .hello,

            color: struct {
                r: bool = true,
                g: bool = true,
                b: bool = true,
            } = .{},
            hovered: bool = false,
            clicked: bool = false,
        } = .{},

        tiles: struct {
            state: enum { selection, tiles } = .selection,

            height: ?usize = null,
            width: ?usize = null,

            colors: ?[][]Color = null,
            windows: ?[][]vaxis.Window = null,
        } = .{},
    } = .{},

    pub fn init(allocator: std.mem.Allocator) !MyApp {
        return .{
            .allocator = allocator,
            .should_quit = false,
            .tty = try vaxis.Tty.init(),
            .vx = try vaxis.init(allocator, .{}),
            .mouse = null,
        };
    }

    pub fn deinit(self: *MyApp) void {
        // Deinit takes an optional allocator. You can choose to pass an allocator to clean up
        // memory, or pass null if your application is shutting down and let the OS clean up the
        // memory
        self.vx.deinit(self.allocator, self.tty.anyWriter());
        self.tty.deinit();

        self.detiles();
    }

    pub fn detiles(self: *MyApp) void {
        if (self.app.tiles.colors) |colors| {
            for (colors) |row| {
                self.allocator.free(row);
            }
            self.allocator.free(colors);
        }
        if (self.app.tiles.windows) |windows| {
            for (windows) |row| {
                self.allocator.free(row);
            }
            self.allocator.free(windows);
        }
    }

    pub fn run(self: *MyApp) !void {
        // Initialize our event loop. This particular loop requires intrusive init
        var loop: vaxis.Loop(Event) = .{
            .tty = &self.tty,
            .vaxis = &self.vx,
        };
        try loop.init();

        // Start the event loop. Events will now be queued
        try loop.start();

        try self.vx.enterAltScreen(self.tty.anyWriter());

        // Query the terminal to detect advanced features, such as kitty keyboard protocol, etc.
        // This will automatically enable the features in the screen you are in, so you will want to
        // call it after entering the alt screen if you are a full screen application. The second
        // arg is a timeout for the terminal to send responses. Typically the response will be very
        // fast, however it could be slow on ssh connections.
        try self.vx.queryTerminal(self.tty.anyWriter(), 1 * std.time.ns_per_s);

        // Enable mouse events
        try self.vx.setMouseMode(self.tty.anyWriter(), true);

        // This is the main event loop. The basic structure is
        // 1. Handle events
        // 2. Draw application
        // 3. Render
        while (!self.should_quit) {
            // pollEvent blocks until we have an event
            loop.pollEvent();
            // tryEvent returns events until the queue is empty
            while (loop.tryEvent()) |event| {
                try self.update(event);
            }
            // Draw our application after handling events
            self.draw();

            // It's best to use a buffered writer for the render method. TTY provides one, but you
            // may use your own. The provided bufferedWriter has a buffer size of 4096
            var buffered = self.tty.bufferedWriter();
            // Render the application to the screen
            try self.vx.render(buffered.writer().any());
            try buffered.flush();
        }
    }

    /// Update our application state from an event
    pub fn update(self: *MyApp, event: Event) !void {
        // universal events
        switch (event) {
            .key_press => |key| {
                if (key.matches('c', .{ .ctrl = true }))
                    self.should_quit = true;
                if (key.matches('1', .{}) and (self.app.state != .child)) {
                    self.app.child = .{};
                    self.app.state = .child;
                }
                if (key.matches('2', .{}) and (self.app.state != .tiles)) {
                    self.detiles();
                    self.app.tiles = .{};
                    self.app.state = .tiles;
                }
            },
            .mouse => |mouse| self.mouse = mouse,
            .winsize => |ws| try self.vx.resize(self.allocator, self.tty.anyWriter(), ws),
            else => {},
        }
        // state specific events
        switch (self.app.state) {
            // child state
            .child => switch (event) {
                .key_press => |key| {
                    // key.matches does some basic matching algorithms. Key matching can be complex in
                    // the presence of kitty keyboard encodings, this will generally be a good approach.
                    // There are other matching functions available for specific purposes, as well
                    if (!self.app.child.clicked) {
                        if (key.matches('r', .{}))
                            self.app.child.color.r = !self.app.child.color.r;
                        if (key.matches('g', .{}))
                            self.app.child.color.g = !self.app.child.color.g;
                        if (key.matches('b', .{}))
                            self.app.child.color.b = !self.app.child.color.b;
                    }
                    if (key.matches('q', .{}) and (self.app.child.state == .goodbye))
                        self.should_quit = true;
                },
                else => {},
            },
            .tiles => {
                switch (self.app.tiles.state) {
                    .selection => {
                        self.app.tiles.width = 2;
                        self.app.tiles.height = 2;

                        self.app.tiles.state = .tiles;
                        self.app.tiles.colors = try self.allocator.alloc([]Color, self.app.tiles.height.?);
                        self.app.tiles.windows = try self.allocator.alloc([]vaxis.Window, self.app.tiles.height.?);
                        var seed: u64 = 0;
                        try std.posix.getrandom(std.mem.asBytes(&seed));
                        var prng = std.rand.DefaultPrng.init(seed);
                        const rand = prng.random();

                        for (self.app.tiles.colors.?, self.app.tiles.windows.?) |*c_row, *w_row| {
                            c_row.* = try self.allocator.alloc(Color, self.app.tiles.width.?);
                            for (c_row.*) |*color| {
                                color.*.r = rand.int(u8);
                                color.*.g = rand.int(u8);
                                color.*.b = rand.int(u8);
                            }
                            w_row.* = try self.allocator.alloc(vaxis.Window, self.app.tiles.width.?);
                        }
                    },
                    .tiles => {
                        switch (event) {
                            else => {},
                        }
                    },
                }
            },
        }
    }

    /// Draw our current state
    pub fn draw(self: *MyApp) void {
        var redraw: bool = false;

        // Window is a bounded area with a view to the screen. You cannot draw outside of a windows
        // bounds. They are light structures, not intended to be stored.
        const win = self.vx.window();

        // Clearing the window has the effect of setting each cell to it's "default" state. Vaxis
        // applications typically will be immediate mode, and you will redraw your entire
        // application during the draw cycle.
        win.clear();

        // In addition to clearing our window, we want to clear the mouse shape state since we may
        // be changing that as well
        self.vx.setMouseShape(.default);

        switch (self.app.state) {
            .child => {

                // set the message
                const msg = switch (self.app.child.state) {
                    .hello => "Hello, world!",
                    .goodbye => "Goodbye, world!",
                };

                const child = win.child(.{
                    .x_off = (win.width / 2) - (msg.len / 2),
                    .y_off = win.height / 2 + 1,
                    .width = .{ .limit = msg.len },
                    .height = .{ .limit = 1 },
                });

                // mouse events are much easier to handle in the draw cycle. Windows have a helper method to
                // determine if the event occurred in the target window. This method returns null if there
                // is no mouse event, or if it occurred outside of the window

                // start handling mouse events
                const unclicked = if (self.mouse) |mouse| blk: {
                    break :blk (mouse.type == .release);
                } else false;
                var unhovered = (self.mouse != null);

                // window mouse events
                if (child.hasMouse(self.mouse)) |mouse| {
                    // mouse shape doesnt work
                    self.vx.setMouseShape(.text);
                    self.app.child.hovered = true;
                    unhovered = false;
                    // button logic
                    if ((mouse.button == .left)) {
                        if (self.app.child.clicked and (mouse.type == .release)) {
                            switch (self.app.child.state) {
                                .hello => self.app.child.state = .goodbye,
                                .goodbye => self.app.child.state = .hello,
                            }
                            redraw = true;
                        }
                        if (mouse.type == .press) self.app.child.clicked = true;
                    }
                    // mouse event handled
                    self.mouse = null;
                }

                // finish handling mouse events
                if (unclicked) self.app.child.clicked = false;
                if (unhovered) self.app.child.hovered = false;

                // define the style of the text in child
                var style: vaxis.Style = .{
                    .fg = .{ .rgb = [_]u8{ 0, 0, 0 } },
                    .reverse = self.app.child.hovered,
                };

                // change color of text
                if (self.app.child.color.r) {
                    switch (style.fg) {
                        .rgb => |rgb| style.fg = .{ .rgb = [_]u8{ 255, rgb[1], rgb[2] } },
                        else => {},
                    }
                }
                if (self.app.child.color.g) {
                    switch (style.fg) {
                        .rgb => |rgb| style.fg = .{ .rgb = [_]u8{ rgb[0], 255, rgb[2] } },
                        else => {},
                    }
                }
                if (self.app.child.color.b) {
                    switch (style.fg) {
                        .rgb => |rgb| style.fg = .{ .rgb = [_]u8{ rgb[0], rgb[1], 255 } },
                        else => {},
                    }
                }

                // Print a text segment to the screen. This is a helper function which iterates over the
                // text field for graphemes. Alternatively, you can implement your own print functions and
                // use the writeCell API.
                _ = try child.printSegment(.{ .text = msg, .style = style }, .{});
            },

            .tiles => {
                switch (self.app.tiles.state) {
                    .selection => {
                        _ = 0;
                    },
                    .tiles => {
                        const height = self.app.tiles.height.?;
                        const width = self.app.tiles.width.?;
                        for (0..height) |i| {
                            for (0..width) |j| {
                                self.app.tiles.windows.?[i][j] = win.child(.{
                                    .x_off = (win.width / width) * i,
                                    .y_off = (win.height / height) * j,
                                    .width = .{ .limit = win.width / width },
                                    .height = .{ .limit = win.height / height },
                                });
                            }
                        }
                    },
                }
            },
        }
        // if we need to redraw, call draw again
        if (redraw) self.draw();
    }
};

/// Keep our main function small. Typically handling arg parsing and initialization only
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer {
        const deinit_status = gpa.deinit();
        //fail test; can't try in defer as defer is executed after we return
        if (deinit_status == .leak) {
            std.log.err("memory leak", .{});
        }
    }
    const allocator = gpa.allocator();

    // Initialize our application
    var app = try MyApp.init(allocator);
    defer app.deinit();

    // Run the application
    try app.run();
}
